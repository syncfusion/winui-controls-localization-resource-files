<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AddNewRowText" xml:space="preserve">
    <value>Click here to add a new row</value>
    <comment>AddNewRow water mark text.</comment>
  </data>
  <data name="AND" xml:space="preserve">
    <value>AND</value>
    <comment>Text for AND FilterPredicate</comment>
  </data>
  <data name="BeginsWith" xml:space="preserve">
    <value>Begins With</value>
    <comment>Text for BeginsWith</comment>
  </data>
  <data name="Blanks" xml:space="preserve">
    <value>(Blanks)</value>
    <comment>Text for Blank filters</comment>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
    <comment>Text for Cancel</comment>
  </data>
  <data name="ClearFilter" xml:space="preserve">
    <value>Clear Filter</value>
    <comment>Text for Clear filters</comment>
  </data>
  <data name="ColumnChooserTitle" xml:space="preserve">
    <value>Column Chooser</value>
    <comment>Column Chooser Window Title</comment>
  </data>
  <data name="ColumnChooserWaterMark" xml:space="preserve">
    <value>(No Fields Available)</value>
    <comment>Empty Column Chooser Water Mark Text</comment>
  </data>
  <data name="Contains" xml:space="preserve">
    <value>Contains</value>
    <comment>Text for Contains</comment>
  </data>
  <data name="Done" xml:space="preserve">
    <value>Done</value>
    <comment>Done to close the Popup</comment>
  </data>
  <data name="Empty" xml:space="preserve">
    <value>Empty</value>
    <comment>Text for Empty</comment>
  </data>
  <data name="EndsWith" xml:space="preserve">
    <value>Ends With</value>
    <comment>Text for EndsWith</comment>
  </data>
  <data name="Equalss" xml:space="preserve">
    <value>Equals</value>
    <comment>Text for Equals</comment>
  </data>
  <data name="GreaterThan" xml:space="preserve">
    <value>Greater Than</value>
    <comment>Text for GreaterThan</comment>
  </data>
  <data name="GreaterThanorEqual" xml:space="preserve">
    <value>Greater Than or Equal</value>
    <comment>Text for GreaterThanorEqual</comment>
  </data>
  <data name="GroupDropAreaText" xml:space="preserve">
    <value>Drag a column to group</value>
    <comment>Text for GroupDropArea</comment>
  </data>
  <data name="LessThan" xml:space="preserve">
    <value>Less Than</value>
    <comment>Text for Less Than</comment>
  </data>
  <data name="LessThanorEqual" xml:space="preserve">
    <value>Less Than or Equal</value>
    <comment>Text for LessThanorEqual</comment>
  </data>
  <data name="Before" xml:space="preserve">
    <value>Before</value>
    <comment>Text for Before</comment>
  </data>
  <data name="BeforeOrEqual" xml:space="preserve">
    <value>Before Or Equal</value>
    <comment>Text for BeforeOrEqual</comment>
  </data>
  <data name="After" xml:space="preserve">
    <value>After</value>
    <comment>Text for After</comment>
  </data>
  <data name="AfterOrEqual" xml:space="preserve">
    <value>After Or Equal</value>
    <comment>Text for AfterOrEqual</comment>
  </data>
  <data name="SortDateAscending" xml:space="preserve">
    <value>Sort Oldest to Newest</value>
    <comment>Text for Sort Ascending</comment>
  </data>
  <data name="SortDateDescending" xml:space="preserve">
    <value>Sort Newest to Oldest</value>
    <comment>Text for Sort Descending</comment>
  </data>
  <data name="NoItems" xml:space="preserve">
    <value>No Items</value>
    <comment>No Items to Display</comment>
  </data>
  <data name="NoMatches" xml:space="preserve">
    <value>No Matches</value>
    <comment>No Items match </comment>
  </data>
  <data name="NotContains" xml:space="preserve">
    <value>Does Not Contain</value>
    <comment>Text for NotContains</comment>
  </data>
  <data name="NotEmpty" xml:space="preserve">
    <value>Not Empty</value>
    <comment>Text for NotEmpty</comment>
  </data>
  <data name="NotEquals" xml:space="preserve">
    <value>Does Not Equal</value>
    <comment>Text For NotEquals</comment>
  </data>
  <data name="NotNull" xml:space="preserve">
    <value>Not Null</value>
    <comment>Text for NotNull</comment>
  </data>
  <data name="Null" xml:space="preserve">
    <value>Null</value>
    <comment>Text for Null</comment>
  </data>
  <data name="OK" xml:space="preserve">
    <value>OK</value>
    <comment>Text for OK</comment>
  </data>
  <data name="OR" xml:space="preserve">
    <value>OR</value>
    <comment>Text for OR FilterPredicate</comment>
  </data>
  <data name="RowErrorMessage" xml:space="preserve">
    <value>Row Containing Error</value>
    <comment>Indicates Error by INotifyDataErrorInfo</comment>
  </data>
  <data name="Search" xml:space="preserve">
    <value>Search</value>
    <comment>Search water mark</comment>
  </data>
  <data name="SelectAll" xml:space="preserve">
    <value>(Select All)</value>
    <comment>Text for Select All</comment>
  </data>
  <data name="ShowRowsWhere" xml:space="preserve">
    <value>Show rows where:</value>
    <comment>Text for ShowRowsWhere</comment>
  </data>
  <data name="SortNumberAscending" xml:space="preserve">
    <value>Sort Smallest to Largest</value>
    <comment>Text for Sort Ascending</comment>
  </data>
  <data name="SortNumberDescending" xml:space="preserve">
    <value>Sort Largest to Smallest</value>
    <comment>Text for Sort Descending</comment>
  </data>
  <data name="SortStringAscending" xml:space="preserve">
    <value>Sort A to Z</value>
    <comment>Text for Sort Ascending</comment>
  </data>
  <data name="SortStringDescending" xml:space="preserve">
    <value>Sort Z to A</value>
    <comment>Text for Sort Descending</comment>
  </data>
  <data name="EnterValidFilterValue" xml:space="preserve">
    <value>Enter Valid Filter Value</value>
    <comment>Text for EnterValidFilterValue</comment>
  </data>
  <data name="TextFilters" xml:space="preserve">
    <value>Text Filters</value>
    <comment>Text for TextFilters</comment>
  </data>
  <data name="NumberFilters" xml:space="preserve">
    <value>Number Filters</value>
    <comment>Text for NumberFilters</comment>
  </data>
  <data name="DateFilters" xml:space="preserve">
    <value>Date Filters</value>
    <comment>Text for DateFilters</comment>
  </data>
  <data name="CantDropHere" xml:space="preserve">
    <value>Cannot drop here</value>
    <comment>Text for Cannot drop here in RowDragAndDrop popup</comment>
  </data>
  <data name="DropAbove" xml:space="preserve">
    <value>Drop above</value>
    <comment>Text for Drop above in RowDragAndDrop popup</comment>
  </data>
  <data name="DropAsChild" xml:space="preserve">
    <value>Drop as child</value>
    <comment>Text for Drop as child in RowDragAndDrop popup of TreeGrid</comment>
  </data>
  <data name="DropBelow" xml:space="preserve">
    <value>Drop below</value>
    <comment>Text for Drop below in RowDragAndDrop popup</comment>
  </data>
  <data name="DropRowsAbove" xml:space="preserve">
    <value>Drop {0} rows above</value>
    <comment>Text for Drop mutiple rows above in RowDragAndDrop popup</comment>
  </data>
  <data name="DropRowsAsChild" xml:space="preserve">
    <value>Drop {0} rows as child</value>
    <comment>Text for Drop mutiple rows as child in RowDragAndDrop popup of TreeGrid</comment>
  </data>
  <data name="DropRowsBelow" xml:space="preserve">
    <value>Drop {0} rows below</value>
    <comment>Text for Drop mutiple rows below in RowDragAndDrop popup</comment>
  </data>
  <data name="DropHere" xml:space="preserve">
    <value>Drop here</value>
    <comment>Text for DropHere in RowDragAndDrop popup</comment>
  </data>
  <data name="DropRowsHere" xml:space="preserve">
    <value>Drop {0} rows here</value>
    <comment>Text for Drop mutiple rows in RowDragAndDrop popup when grid has no records</comment>
  </data>
  <data name="NotBeginsWith" xml:space="preserve">
    <value>Does Not Begin With</value>
    <comment>Text for NotBeginsWith</comment>
  </data>
  <data name="NotEndsWith" xml:space="preserve">
    <value>Does Not End With</value>
    <comment>Text for NotEndsWith</comment>
  </data>
</root>